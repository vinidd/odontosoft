<?php

/**
 * This is the model base class for the table "consulta".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Consulta".
 *
 * Columns in table "consulta" available as properties of the model,
 * followed by relations of table "consulta" available as properties of the model.
 *
 * @property integer $id_consulta
 * @property integer $id_cliente
 * @property integer $id_dentista
 * @property integer $id_procedimento
 * @property string $data
 * @property string $horario
 * @property integer $duracao
 * @property integer $id_status
 * @property string $data_criacao
 * @property string $descricao
 *
 * @property Atestado[] $atestados
 * @property ClienteHasProcedimentoHasConsulta[] $clienteHasProcedimentoHasConsultas
 * @property Cliente $idCliente
 * @property Dentista $idDentista
 * @property Status $idStatus
 * @property Procedimento $idProcedimento
 * @property Pagamento[] $pagamentos
 * @property Receita[] $receitas
 */
abstract class BaseConsulta extends GxActiveRecord {

    public $clienteN = null;
    public $dentistaN = null;
    public $dataN = null;
    public $statusN = null;
    public $idN = null;

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'consulta';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Consulta|Consultas', $n);
    }

    public static function representingColumn() {
        return 'data';
    }

    public function rules() {
        return array(
            array('id_cliente, id_dentista, data, horario, id_status, data_criacao, id_procedimento', 'required'),
            array('id_cliente, id_dentista, duracao, id_status', 'numerical', 'integerOnly' => true),
            array('horario', 'length', 'max' => 5),
            array('descricao', 'safe'),
            array('duracao, descricao', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id_consulta, id_cliente, id_dentista, data, horario, duracao, id_status, data_criacao, id_procedimento, descricao, clienteN, dentistaN, dataN, statusN, idN', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'atestados' => array(self::HAS_MANY, 'Atestado', 'id_consulta'),
            'clienteHasProcedimentoHasConsultas' => array(self::HAS_MANY, 'ClienteHasProcedimentoHasConsulta', 'id_consulta'),
            'idCliente' => array(self::BELONGS_TO, 'Cliente', 'id_cliente'),
            'idDentista' => array(self::BELONGS_TO, 'Dentista', 'id_dentista'),
            'idStatus' => array(self::BELONGS_TO, 'Status', 'id_status'),
            'idProcedimento' => array(self::BELONGS_TO, 'Procedimento', 'id_procedimento'),
            'pagamentos' => array(self::HAS_MANY, 'Pagamento', 'id_consulta'),
            'receitas' => array(self::HAS_MANY, 'Receita', 'id_consulta'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id_consulta' => Yii::t('app', 'Id Consulta'),
            'IdNome' => '#',
            'id_cliente' => null,
            'id_dentista' => null,
            'ClienteNome' => Yii::t('app', 'Cliente'),
            'DentistaNome' => Yii::t('app', 'Dentista'),
            'data' => Yii::t('app', 'Data'),
            'DataNome' => Yii::t('app', 'Data'),
            'horario' => Yii::t('app', 'Horário'),
            'duracao' => Yii::t('app', 'Duração'),
            'id_status' => null,
            'StatusNome' => Yii::t('app', 'Status'),
            'data_criacao' => Yii::t('app', 'Data Criação'),
            'descricao' => Yii::t('app', 'Descrição'),
            'atestados' => null,
            'clienteHasProcedimentoHasConsultas' => null,
            'idCliente' => null,
            'idDentista' => null,
            'idStatus' => null,
            'pagamentos' => null,
            'receitas' => null,
        );
    }

    public function search($pagination = true) {
        $criteria = new CDbCriteria;

        $criteria->condition = '1=1';
        $criteria->join = '';

        if (isset($this->idN) && strlen($this->idN)) {
            $criteria->condition .= ' AND t.id_consulta = ' . $this->idN;
        }

        if (isset($this->clienteN) && strlen($this->clienteN)) {
            $criteria->join .= ' inner join cliente c on c.id_cliente = t.id_cliente';
            $criteria->join .= ' inner join pessoa p on p.id_pessoa = c.id_pessoa';
            $criteria->condition .= ' AND p.nome LIKE "' . $this->clienteN . '%"';
        }

        if (isset($this->dentistaN) && strlen($this->dentistaN)) {
            $criteria->join .= ' inner join dentista d on d.id_dentista = t.id_dentista';
            $criteria->join .= ' inner join pessoa pd on pd.id_pessoa = d.id_pessoa';
            $criteria->condition .= ' AND pd.nome LIKE "' . $this->dentistaN . '%"';
        }

        if (isset($this->dataN)) {
            $data = str_replace('/', '', $this->dataN);
            $data = str_replace('_', '', $data);

            if (strlen($data) == 8) {
                $newData = DateTime::createFromFormat('d/m/Y', $this->dataN);
                $newData = $newData->format('Y-m-d');
                $criteria->condition .= ' AND data = "' . $newData . '"';
            } else {
                $this->dataN = '';
            }
        }

        if (isset($this->statusN) && $this->statusN) {
            $criteria->condition .= ' AND id_status = ' . $this->statusN;
        }

        if (!isset($_GET['sort'])) {
            $criteria->order = 'id_consulta DESC';
        }

        $sort = new CSort();
        $sort->attributes = array(
            'DataNome' => array(
                'asc' => 'data ASC, horario ASC',
                'desc' => 'data DESC, horario DESC',
            ),
            'horario' => array(
                'asc' => 'horario ASC, data ASC',
                'desc' => 'horario DESC, data DESC',
            ),
            'IdNome' => array(
                'asc' => 'id_consulta ASC',
                'desc' => 'id_consulta DESC',
            ),
            '*', // this adds all of the other columns as sortable
        );

        $criteria->compare('id_consulta', $this->id_consulta);
        $criteria->compare('id_cliente', $this->id_cliente);
        $criteria->compare('id_dentista', $this->id_dentista);
        $criteria->compare('data', $this->data, true);
        $criteria->compare('horario', $this->horario, true);
        $criteria->compare('duracao', $this->duracao);
        $criteria->compare('id_status', $this->id_status);
        $criteria->compare('data_criacao', $this->data_criacao, true);
        $criteria->compare('id_procedimento', $this->id_procedimento);
        $criteria->compare('descricao', $this->descricao, true);

        if ($pagination) {
            $pagination = array('pageSize' => 25);
        }

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort' => $sort,
            'pagination' => $pagination,
        ));
    }

    public function changeDate($inverse = false) {
        $in = 'd/m/Y';
        $out = 'Y-m-d';
        if ($inverse) {
            $in = 'Y-m-d';
            $out = 'd/m/Y';
        }
        $newData = DateTime::createFromFormat($in, $this->data);
        $this->data = $newData->format($out);
    }

    public function getClienteNome() {
        return $this->idCliente;
    }

    public function getDentistaNome() {
        return $this->idDentista;
    }

    public function getDataNome() {
        $in = 'Y-m-d';
        $out = 'd/m/Y';
        $newData = DateTime::createFromFormat($in, $this->data);
        return $newData->format($out);
    }

    public function getStatusNome($style = false) {
        switch ($this->id_status) {
            case 1: $cor = 'success';
                break;
            case 2: $cor = 'info';
                break;
            case 3: $cor = 'danger';
                break;
            case 4: $cor = 'warning';
                break;
            case 5: $cor = 'inverse';
                break;
            default: $cor = '';
        }

        if ($style) {
            return '<div style="width: 120px; text-align: center;" class="btn-' . $cor . '">' . Yii::t('app', $this->idStatus->nome) . '</div>';
        }
        
        return '<div class="btn-' . $cor . '">' . Yii::t('app', $this->idStatus->nome) . '</div>';
    }

    public function getIdNome() {
        return $this->primaryKey;
    }

}
