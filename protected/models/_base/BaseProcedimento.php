<?php

/**
 * This is the model base class for the table "procedimento".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Procedimento".
 *
 * Columns in table "procedimento" available as properties of the model,
 * followed by relations of table "procedimento" available as properties of the model.
 *
 * @property integer $id_procedimento
 * @property string $procedimento
 * @property float $valor
 *
 * @property ClienteHasProcedimento[] $clienteHasProcedimentos
 * @property ProcedimentoHasDentista[] $procedimentoHasDentistas
 */
abstract class BaseProcedimento extends GxActiveRecord {

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'procedimento';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Procedimento|Procedimentos', $n);
    }

    public static function representingColumn() {
        return 'procedimento';
    }

    public function rules() {
        return array(
            array('procedimento, valor', 'required'),
            array('procedimento', 'length', 'max' => 120),
            array('procedimento', 'unique'),
            array('valor', 'length', 'max' => 9),
            array('id_procedimento, procedimento, valor', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'clienteHasProcedimentos' => array(self::HAS_MANY, 'ClienteHasProcedimento', 'id_procedimento'),
            'procedimentoHasDentistas' => array(self::HAS_MANY, 'ProcedimentoHasDentista', 'id_procedimento'),
            'consultas' => array(self::HAS_MANY, 'Consulta', 'id_procedimento'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id_procedimento' => Yii::t('app', 'Id Procedimento'),
            'procedimento' => Yii::t('app', 'Procedimento'),
            'clienteHasProcedimentos' => null,
            'procedimentoHasDentistas' => null,
            'valor' => Yii::t('app', 'Valor'),
            'valorNome' => Yii::t('app', 'Valor'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id_procedimento', $this->id_procedimento);
        $criteria->compare('procedimento', $this->procedimento, true);
        $criteria->compare('valor', $this->valor, true);

        if (!isset($_GET['sort'])) {
            $criteria->order = 'procedimento ASC';
        }
        
        $sort = new CSort();
        $sort->attributes = array(
            'valorNome' => array(
                'asc' => 'valor ASC',
                'desc' => 'valor DESC',
            ),
        );
        
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort' => $sort,
        ));
    }

    public function changeValor($inverse = false) {
        if ($inverse) {
            $this->valor = number_format($this->valor, 2, ',', '.'); //2.000,00
        } else {
            $this->valor = str_replace('.', '', $this->valor);
            $this->valor = str_replace(',', '.', $this->valor); //2000.00
        }
    }
    
    public function getValorNome() {
        return 'R$ ' . number_format($this->valor, 2, ',', '.');
    }
}
